<?php
/**
 * MailApi
 * PHP version 5
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.2.3.dev7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ESI\Api;

use \ESI\ApiClient;
use \ESI\ApiException;
use \ESI\Configuration;
use \ESI\ObjectSerializer;

/**
 * MailApi Class Doc Comment
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailApi
{
    /**
     * API Client
     *
     * @var \ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/latest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ESI\ApiClient $apiClient set the API client
     *
     * @return MailApi
     */
    public function setApiClient(\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailId
     *
     * Delete a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return void
     */
    public function deleteCharactersCharacterIdMailMailId($characterId, $mailId, $datasource = null)
    {
        list($response) = $this->deleteCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $datasource);
        return $response;
    }

    /**
     * Operation deleteCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Delete a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling deleteCharactersCharacterIdMailMailId');
        }
        // verify the required parameter 'mailId' is set
        if ($mailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mailId when calling deleteCharactersCharacterIdMailMailId');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/{mail_id}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // path params
        if ($mailId !== null) {
            $resourcePath = str_replace(
                "{" . "mail_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($mailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/characters/{character_id}/mail/{mail_id}/'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteCharactersCharacterIdMailMailIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteCharactersCharacterIdMailMailIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMail
     *
     * Return mail headers
     *
     * @param int $characterId An EVE character ID (required)
     * @param int[] $labels Fetch only mails that match one or more of the given labels (optional)
     * @param int $lastMailId List only mail with an ID lower than the given ID, if present (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return \ESI\Model\GetCharactersCharacterIdMail200OkObject[]
     */
    public function getCharactersCharacterIdMail($characterId, $labels = null, $lastMailId = null, $datasource = null)
    {
        list($response) = $this->getCharactersCharacterIdMailWithHttpInfo($characterId, $labels, $lastMailId, $datasource);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailWithHttpInfo
     *
     * Return mail headers
     *
     * @param int $characterId An EVE character ID (required)
     * @param int[] $labels Fetch only mails that match one or more of the given labels (optional)
     * @param int $lastMailId List only mail with an ID lower than the given ID, if present (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of \ESI\Model\GetCharactersCharacterIdMail200OkObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailWithHttpInfo($characterId, $labels = null, $lastMailId = null, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling getCharactersCharacterIdMail');
        }
        if (!is_null($labels) && (count($labels) < 1)) {
            throw new \InvalidArgumentException('invalid value for "$labels" when calling MailApi.getCharactersCharacterIdMail, number of items must be greater than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($labels)) {
            $labels = $this->apiClient->getSerializer()->serializeCollection($labels, 'csv', true);
        }
        if ($labels !== null) {
            $queryParams['labels'] = $this->apiClient->getSerializer()->toQueryValue($labels);
        }
        // query params
        if ($lastMailId !== null) {
            $queryParams['last_mail_id'] = $this->apiClient->getSerializer()->toQueryValue($lastMailId);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetCharactersCharacterIdMail200OkObject[]',
                '/characters/{character_id}/mail/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetCharactersCharacterIdMail200OkObject[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMail200OkObject[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailLabels
     *
     * Get mail labels and unread counts
     *
     * @param int $characterId An EVE character ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return \ESI\Model\GetCharactersCharacterIdMailLabelsOk
     */
    public function getCharactersCharacterIdMailLabels($characterId, $datasource = null)
    {
        list($response) = $this->getCharactersCharacterIdMailLabelsWithHttpInfo($characterId, $datasource);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailLabelsWithHttpInfo
     *
     * Get mail labels and unread counts
     *
     * @param int $characterId An EVE character ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of \ESI\Model\GetCharactersCharacterIdMailLabelsOk, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailLabelsWithHttpInfo($characterId, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling getCharactersCharacterIdMailLabels');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/labels/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetCharactersCharacterIdMailLabelsOk',
                '/characters/{character_id}/mail/labels/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetCharactersCharacterIdMailLabelsOk', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailLabelsOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailLabelsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailLabelsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailLists
     *
     * Return mailing list subscriptions
     *
     * @param int $characterId An EVE character ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return \ESI\Model\GetCharactersCharacterIdMailLists200OkObject[]
     */
    public function getCharactersCharacterIdMailLists($characterId, $datasource = null)
    {
        list($response) = $this->getCharactersCharacterIdMailListsWithHttpInfo($characterId, $datasource);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailListsWithHttpInfo
     *
     * Return mailing list subscriptions
     *
     * @param int $characterId An EVE character ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of \ESI\Model\GetCharactersCharacterIdMailLists200OkObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailListsWithHttpInfo($characterId, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling getCharactersCharacterIdMailLists');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/lists/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetCharactersCharacterIdMailLists200OkObject[]',
                '/characters/{character_id}/mail/lists/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetCharactersCharacterIdMailLists200OkObject[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailLists200OkObject[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailListsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailListsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMailMailId
     *
     * Return a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return \ESI\Model\GetCharactersCharacterIdMailMailIdOk
     */
    public function getCharactersCharacterIdMailMailId($characterId, $mailId, $datasource = null)
    {
        list($response) = $this->getCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $datasource);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Return a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of \ESI\Model\GetCharactersCharacterIdMailMailIdOk, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling getCharactersCharacterIdMailMailId');
        }
        // verify the required parameter 'mailId' is set
        if ($mailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mailId when calling getCharactersCharacterIdMailMailId');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/{mail_id}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // path params
        if ($mailId !== null) {
            $resourcePath = str_replace(
                "{" . "mail_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($mailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetCharactersCharacterIdMailMailIdOk',
                '/characters/{character_id}/mail/{mail_id}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetCharactersCharacterIdMailMailIdOk', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailMailIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailMailIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailMailIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetCharactersCharacterIdMailMailIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdMail
     *
     * Send a new mail
     *
     * @param int $characterId The sender&#39;s character ID (required)
     * @param \ESI\Model\PostCharactersCharacterIdMailMail $mail The mail to send (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return int
     */
    public function postCharactersCharacterIdMail($characterId, $mail, $datasource = null)
    {
        list($response) = $this->postCharactersCharacterIdMailWithHttpInfo($characterId, $mail, $datasource);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdMailWithHttpInfo
     *
     * Send a new mail
     *
     * @param int $characterId The sender&#39;s character ID (required)
     * @param \ESI\Model\PostCharactersCharacterIdMailMail $mail The mail to send (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdMailWithHttpInfo($characterId, $mail, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling postCharactersCharacterIdMail');
        }
        // verify the required parameter 'mail' is set
        if ($mail === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mail when calling postCharactersCharacterIdMail');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mail)) {
            $_tempBody = $mail;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/characters/{character_id}/mail/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostCharactersCharacterIdMailBadRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostCharactersCharacterIdMailForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostCharactersCharacterIdMailInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdMailLabels
     *
     * Create a mail label
     *
     * @param int $characterId An EVE character ID (required)
     * @param \ESI\Model\PostCharactersCharacterIdMailLabelsLabel $label Label to create (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return int
     */
    public function postCharactersCharacterIdMailLabels($characterId, $label = null, $datasource = null)
    {
        list($response) = $this->postCharactersCharacterIdMailLabelsWithHttpInfo($characterId, $label, $datasource);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdMailLabelsWithHttpInfo
     *
     * Create a mail label
     *
     * @param int $characterId An EVE character ID (required)
     * @param \ESI\Model\PostCharactersCharacterIdMailLabelsLabel $label Label to create (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdMailLabelsWithHttpInfo($characterId, $label = null, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling postCharactersCharacterIdMailLabels');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/labels/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($label)) {
            $_tempBody = $label;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/characters/{character_id}/mail/labels/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostCharactersCharacterIdMailLabelsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostCharactersCharacterIdMailLabelsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCharactersCharacterIdMailMailId
     *
     * Update metadata about a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param \ESI\Model\PutCharactersCharacterIdMailMailIdContents $contents Data used to update the mail (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return void
     */
    public function putCharactersCharacterIdMailMailId($characterId, $mailId, $contents, $datasource = null)
    {
        list($response) = $this->putCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $contents, $datasource);
        return $response;
    }

    /**
     * Operation putCharactersCharacterIdMailMailIdWithHttpInfo
     *
     * Update metadata about a mail
     *
     * @param int $characterId An EVE character ID (required)
     * @param int $mailId An EVE mail ID (required)
     * @param \ESI\Model\PutCharactersCharacterIdMailMailIdContents $contents Data used to update the mail (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @throws \ESI\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCharactersCharacterIdMailMailIdWithHttpInfo($characterId, $mailId, $contents, $datasource = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $characterId when calling putCharactersCharacterIdMailMailId');
        }
        // verify the required parameter 'mailId' is set
        if ($mailId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mailId when calling putCharactersCharacterIdMailMailId');
        }
        // verify the required parameter 'contents' is set
        if ($contents === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contents when calling putCharactersCharacterIdMailMailId');
        }
        // parse inputs
        $resourcePath = "/characters/{character_id}/mail/{mail_id}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                "{" . "character_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($characterId),
                $resourcePath
            );
        }
        // path params
        if ($mailId !== null) {
            $resourcePath = str_replace(
                "{" . "mail_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($mailId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contents)) {
            $_tempBody = $contents;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/characters/{character_id}/mail/{mail_id}/'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutCharactersCharacterIdMailMailIdBadRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutCharactersCharacterIdMailMailIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutCharactersCharacterIdMailMailIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
