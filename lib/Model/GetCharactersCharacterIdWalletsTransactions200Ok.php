<?php
/**
 * GetCharactersCharacterIdWalletsTransactions200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.2.6.dev1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetCharactersCharacterIdWalletsTransactions200Ok Class Doc Comment
 *
 * @category    Class */
 // @description wallet transaction
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdWalletsTransactions200Ok implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_wallets_transactions_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'int',
        'client_type' => 'string',
        'journal_ref_id' => 'int',
        'location_id' => 'int',
        'location_type' => 'string',
        'price_per_unit' => 'int',
        'quantity' => 'int',
        'transaction_date' => '\DateTime',
        'transaction_for' => 'string',
        'transaction_id' => 'int',
        'transaction_type' => 'string',
        'type_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'client_type' => 'client_type',
        'journal_ref_id' => 'journal_ref_id',
        'location_id' => 'location_id',
        'location_type' => 'location_type',
        'price_per_unit' => 'price_per_unit',
        'quantity' => 'quantity',
        'transaction_date' => 'transaction_date',
        'transaction_for' => 'transaction_for',
        'transaction_id' => 'transaction_id',
        'transaction_type' => 'transaction_type',
        'type_id' => 'type_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_type' => 'setClientType',
        'journal_ref_id' => 'setJournalRefId',
        'location_id' => 'setLocationId',
        'location_type' => 'setLocationType',
        'price_per_unit' => 'setPricePerUnit',
        'quantity' => 'setQuantity',
        'transaction_date' => 'setTransactionDate',
        'transaction_for' => 'setTransactionFor',
        'transaction_id' => 'setTransactionId',
        'transaction_type' => 'setTransactionType',
        'type_id' => 'setTypeId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_type' => 'getClientType',
        'journal_ref_id' => 'getJournalRefId',
        'location_id' => 'getLocationId',
        'location_type' => 'getLocationType',
        'price_per_unit' => 'getPricePerUnit',
        'quantity' => 'getQuantity',
        'transaction_date' => 'getTransactionDate',
        'transaction_for' => 'getTransactionFor',
        'transaction_id' => 'getTransactionId',
        'transaction_type' => 'getTransactionType',
        'type_id' => 'getTypeId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CLIENT_TYPE_CHARACTER = 'character';
    const CLIENT_TYPE_CORPORATION = 'corporation';
    const CLIENT_TYPE_ALLIANCE = 'alliance';
    const LOCATION_TYPE_STATION = 'station';
    const LOCATION_TYPE_STRUCTURE = 'structure';
    const TRANSACTION_FOR_PERSONAL = 'personal';
    const TRANSACTION_FOR_CORPORATE = 'corporate';
    const TRANSACTION_TYPE_BUY = 'buy';
    const TRANSACTION_TYPE_SELL = 'sell';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getClientTypeAllowableValues()
    {
        return [
            self::CLIENT_TYPE_CHARACTER,
            self::CLIENT_TYPE_CORPORATION,
            self::CLIENT_TYPE_ALLIANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE_STATION,
            self::LOCATION_TYPE_STRUCTURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionForAllowableValues()
    {
        return [
            self::TRANSACTION_FOR_PERSONAL,
            self::TRANSACTION_FOR_CORPORATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_BUY,
            self::TRANSACTION_TYPE_SELL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_type'] = isset($data['client_type']) ? $data['client_type'] : null;
        $this->container['journal_ref_id'] = isset($data['journal_ref_id']) ? $data['journal_ref_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : null;
        $this->container['price_per_unit'] = isset($data['price_per_unit']) ? $data['price_per_unit'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['transaction_for'] = isset($data['transaction_for']) ? $data['transaction_for'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['client_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'client_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["station", "structure"];
        if (!in_array($this->container['location_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'location_type', must be one of #{allowed_values}.";
        }

        if ($this->container['transaction_date'] === null) {
            $invalid_properties[] = "'transaction_date' can't be null";
        }
        $allowed_values = ["personal", "corporate"];
        if (!in_array($this->container['transaction_for'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_for', must be one of #{allowed_values}.";
        }

        if ($this->container['transaction_id'] === null) {
            $invalid_properties[] = "'transaction_id' can't be null";
        }
        $allowed_values = ["buy", "sell"];
        if (!in_array($this->container['transaction_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['client_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["station", "structure"];
        if (!in_array($this->container['location_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['transaction_date'] === null) {
            return false;
        }
        $allowed_values = ["personal", "corporate"];
        if (!in_array($this->container['transaction_for'], $allowed_values)) {
            return false;
        }
        if ($this->container['transaction_id'] === null) {
            return false;
        }
        $allowed_values = ["buy", "sell"];
        if (!in_array($this->container['transaction_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets client_id
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param int $client_id client_id integer
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_type
     * @return string
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     * @param string $client_type client_type string
     * @return $this
     */
    public function setClientType($client_type)
    {
        $allowed_values = array('character', 'corporation', 'alliance');
        if (!is_null($client_type) && (!in_array($client_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'client_type', must be one of 'character', 'corporation', 'alliance'");
        }
        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets journal_ref_id
     * @return int
     */
    public function getJournalRefId()
    {
        return $this->container['journal_ref_id'];
    }

    /**
     * Sets journal_ref_id
     * @param int $journal_ref_id journal_ref_id integer
     * @return $this
     */
    public function setJournalRefId($journal_ref_id)
    {
        $this->container['journal_ref_id'] = $journal_ref_id;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id location_id integer
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_type
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     * @param string $location_type location_type string
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $allowed_values = array('station', 'structure');
        if (!is_null($location_type) && (!in_array($location_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'location_type', must be one of 'station', 'structure'");
        }
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets price_per_unit
     * @return int
     */
    public function getPricePerUnit()
    {
        return $this->container['price_per_unit'];
    }

    /**
     * Sets price_per_unit
     * @param int $price_per_unit price_per_unit integer
     * @return $this
     */
    public function setPricePerUnit($price_per_unit)
    {
        $this->container['price_per_unit'] = $price_per_unit;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity quantity integer
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param \DateTime $transaction_date transaction_date string
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_for
     * @return string
     */
    public function getTransactionFor()
    {
        return $this->container['transaction_for'];
    }

    /**
     * Sets transaction_for
     * @param string $transaction_for transaction_for string
     * @return $this
     */
    public function setTransactionFor($transaction_for)
    {
        $allowed_values = array('personal', 'corporate');
        if (!is_null($transaction_for) && (!in_array($transaction_for, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_for', must be one of 'personal', 'corporate'");
        }
        $this->container['transaction_for'] = $transaction_for;

        return $this;
    }

    /**
     * Gets transaction_id
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     * @param int $transaction_id transaction_id integer
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_type
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     * @param string $transaction_type transaction_type string
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $allowed_values = array('buy', 'sell');
        if (!is_null($transaction_type) && (!in_array($transaction_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_type', must be one of 'buy', 'sell'");
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets type_id
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     * @param int $type_id type_id integer
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
