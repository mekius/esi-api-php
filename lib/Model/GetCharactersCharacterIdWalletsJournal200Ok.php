<?php
/**
 * GetCharactersCharacterIdWalletsJournal200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.2.6.dev1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetCharactersCharacterIdWalletsJournal200Ok Class Doc Comment
 *
 * @category    Class */
 // @description transaction
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdWalletsJournal200Ok implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_wallets_journal_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'argument_name' => 'string',
        'argument_value' => 'int',
        'first_party_id' => 'int',
        'first_party_type' => 'string',
        'post_transaction_balance' => 'int',
        'reason' => 'string',
        'ref_id' => 'int',
        'ref_type' => 'string',
        'second_party_id' => 'int',
        'second_party_type' => 'string',
        'tax_amount' => 'int',
        'tax_reciever_id' => 'int',
        'transaction_amount' => 'int',
        'transaction_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'argument_name' => 'argument_name',
        'argument_value' => 'argument_value',
        'first_party_id' => 'first_party_id',
        'first_party_type' => 'first_party_type',
        'post_transaction_balance' => 'post_transaction_balance',
        'reason' => 'reason',
        'ref_id' => 'ref_id',
        'ref_type' => 'ref_type',
        'second_party_id' => 'second_party_id',
        'second_party_type' => 'second_party_type',
        'tax_amount' => 'tax_amount',
        'tax_reciever_id' => 'tax_reciever_id',
        'transaction_amount' => 'transaction_amount',
        'transaction_date' => 'transaction_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'argument_name' => 'setArgumentName',
        'argument_value' => 'setArgumentValue',
        'first_party_id' => 'setFirstPartyId',
        'first_party_type' => 'setFirstPartyType',
        'post_transaction_balance' => 'setPostTransactionBalance',
        'reason' => 'setReason',
        'ref_id' => 'setRefId',
        'ref_type' => 'setRefType',
        'second_party_id' => 'setSecondPartyId',
        'second_party_type' => 'setSecondPartyType',
        'tax_amount' => 'setTaxAmount',
        'tax_reciever_id' => 'setTaxRecieverId',
        'transaction_amount' => 'setTransactionAmount',
        'transaction_date' => 'setTransactionDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'argument_name' => 'getArgumentName',
        'argument_value' => 'getArgumentValue',
        'first_party_id' => 'getFirstPartyId',
        'first_party_type' => 'getFirstPartyType',
        'post_transaction_balance' => 'getPostTransactionBalance',
        'reason' => 'getReason',
        'ref_id' => 'getRefId',
        'ref_type' => 'getRefType',
        'second_party_id' => 'getSecondPartyId',
        'second_party_type' => 'getSecondPartyType',
        'tax_amount' => 'getTaxAmount',
        'tax_reciever_id' => 'getTaxRecieverId',
        'transaction_amount' => 'getTransactionAmount',
        'transaction_date' => 'getTransactionDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FIRST_PARTY_TYPE_CHARACTER = 'character';
    const FIRST_PARTY_TYPE_CORPORATION = 'corporation';
    const FIRST_PARTY_TYPE_ALLIANCE = 'alliance';
    const SECOND_PARTY_TYPE_CHARACTER = 'character';
    const SECOND_PARTY_TYPE_CORPORATION = 'corporation';
    const SECOND_PARTY_TYPE_ALLIANCE = 'alliance';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFirstPartyTypeAllowableValues()
    {
        return [
            self::FIRST_PARTY_TYPE_CHARACTER,
            self::FIRST_PARTY_TYPE_CORPORATION,
            self::FIRST_PARTY_TYPE_ALLIANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSecondPartyTypeAllowableValues()
    {
        return [
            self::SECOND_PARTY_TYPE_CHARACTER,
            self::SECOND_PARTY_TYPE_CORPORATION,
            self::SECOND_PARTY_TYPE_ALLIANCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['argument_name'] = isset($data['argument_name']) ? $data['argument_name'] : null;
        $this->container['argument_value'] = isset($data['argument_value']) ? $data['argument_value'] : null;
        $this->container['first_party_id'] = isset($data['first_party_id']) ? $data['first_party_id'] : null;
        $this->container['first_party_type'] = isset($data['first_party_type']) ? $data['first_party_type'] : null;
        $this->container['post_transaction_balance'] = isset($data['post_transaction_balance']) ? $data['post_transaction_balance'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['ref_type'] = isset($data['ref_type']) ? $data['ref_type'] : null;
        $this->container['second_party_id'] = isset($data['second_party_id']) ? $data['second_party_id'] : null;
        $this->container['second_party_type'] = isset($data['second_party_type']) ? $data['second_party_type'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['tax_reciever_id'] = isset($data['tax_reciever_id']) ? $data['tax_reciever_id'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['first_party_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'first_party_type', must be one of #{allowed_values}.";
        }

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['ref_type'] === null) {
            $invalid_properties[] = "'ref_type' can't be null";
        }
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['second_party_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'second_party_type', must be one of #{allowed_values}.";
        }

        if ($this->container['transaction_date'] === null) {
            $invalid_properties[] = "'transaction_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['first_party_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['ref_type'] === null) {
            return false;
        }
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['second_party_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['transaction_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets argument_name
     * @return string
     */
    public function getArgumentName()
    {
        return $this->container['argument_name'];
    }

    /**
     * Sets argument_name
     * @param string $argument_name argument_name string
     * @return $this
     */
    public function setArgumentName($argument_name)
    {
        $this->container['argument_name'] = $argument_name;

        return $this;
    }

    /**
     * Gets argument_value
     * @return int
     */
    public function getArgumentValue()
    {
        return $this->container['argument_value'];
    }

    /**
     * Sets argument_value
     * @param int $argument_value argument_value integer
     * @return $this
     */
    public function setArgumentValue($argument_value)
    {
        $this->container['argument_value'] = $argument_value;

        return $this;
    }

    /**
     * Gets first_party_id
     * @return int
     */
    public function getFirstPartyId()
    {
        return $this->container['first_party_id'];
    }

    /**
     * Sets first_party_id
     * @param int $first_party_id first_party_id integer
     * @return $this
     */
    public function setFirstPartyId($first_party_id)
    {
        $this->container['first_party_id'] = $first_party_id;

        return $this;
    }

    /**
     * Gets first_party_type
     * @return string
     */
    public function getFirstPartyType()
    {
        return $this->container['first_party_type'];
    }

    /**
     * Sets first_party_type
     * @param string $first_party_type first_party_type string
     * @return $this
     */
    public function setFirstPartyType($first_party_type)
    {
        $allowed_values = array('character', 'corporation', 'alliance');
        if (!is_null($first_party_type) && (!in_array($first_party_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'first_party_type', must be one of 'character', 'corporation', 'alliance'");
        }
        $this->container['first_party_type'] = $first_party_type;

        return $this;
    }

    /**
     * Gets post_transaction_balance
     * @return int
     */
    public function getPostTransactionBalance()
    {
        return $this->container['post_transaction_balance'];
    }

    /**
     * Sets post_transaction_balance
     * @param int $post_transaction_balance post_transaction_balance integer
     * @return $this
     */
    public function setPostTransactionBalance($post_transaction_balance)
    {
        $this->container['post_transaction_balance'] = $post_transaction_balance;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason reason string
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets ref_id
     * @return int
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param int $ref_id ref_id integer
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets ref_type
     * @return string
     */
    public function getRefType()
    {
        return $this->container['ref_type'];
    }

    /**
     * Sets ref_type
     * @param string $ref_type ref_type string
     * @return $this
     */
    public function setRefType($ref_type)
    {
        $this->container['ref_type'] = $ref_type;

        return $this;
    }

    /**
     * Gets second_party_id
     * @return int
     */
    public function getSecondPartyId()
    {
        return $this->container['second_party_id'];
    }

    /**
     * Sets second_party_id
     * @param int $second_party_id second_party_id integer
     * @return $this
     */
    public function setSecondPartyId($second_party_id)
    {
        $this->container['second_party_id'] = $second_party_id;

        return $this;
    }

    /**
     * Gets second_party_type
     * @return string
     */
    public function getSecondPartyType()
    {
        return $this->container['second_party_type'];
    }

    /**
     * Sets second_party_type
     * @param string $second_party_type second_party_type string
     * @return $this
     */
    public function setSecondPartyType($second_party_type)
    {
        $allowed_values = array('character', 'corporation', 'alliance');
        if (!is_null($second_party_type) && (!in_array($second_party_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'second_party_type', must be one of 'character', 'corporation', 'alliance'");
        }
        $this->container['second_party_type'] = $second_party_type;

        return $this;
    }

    /**
     * Gets tax_amount
     * @return int
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     * @param int $tax_amount tax_amount integer
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_reciever_id
     * @return int
     */
    public function getTaxRecieverId()
    {
        return $this->container['tax_reciever_id'];
    }

    /**
     * Sets tax_reciever_id
     * @param int $tax_reciever_id tax_reciever_id integer
     * @return $this
     */
    public function setTaxRecieverId($tax_reciever_id)
    {
        $this->container['tax_reciever_id'] = $tax_reciever_id;

        return $this;
    }

    /**
     * Gets transaction_amount
     * @return int
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     * @param int $transaction_amount Positive if transferred to first party, negative if transferred to second party
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param \DateTime $transaction_date transaction_date string
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
