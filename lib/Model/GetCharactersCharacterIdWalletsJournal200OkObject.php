<?php
/**
 * GetCharactersCharacterIdWalletsJournal200OkObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.2.3.dev7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ESI\Model;

use \ArrayAccess;

/**
 * GetCharactersCharacterIdWalletsJournal200OkObject Class Doc Comment
 *
 * @category    Class */
 // @description transaction
/**
 * @package     ESI
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdWalletsJournal200OkObject implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_wallets_journal__200_ok_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'argumentName' => 'string',
        'argumentValue' => 'int',
        'firstPartyId' => 'int',
        'firstPartyType' => 'string',
        'postTransactionBalance' => 'int',
        'reason' => 'string',
        'refId' => 'int',
        'refType' => 'string',
        'secondPartyId' => 'int',
        'secondPartyType' => 'string',
        'taxAmount' => 'int',
        'taxRecieverId' => 'int',
        'transactionAmount' => 'int',
        'transactionDate' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'argumentName' => 'argument_name',
        'argumentValue' => 'argument_value',
        'firstPartyId' => 'first_party_id',
        'firstPartyType' => 'first_party_type',
        'postTransactionBalance' => 'post_transaction_balance',
        'reason' => 'reason',
        'refId' => 'ref_id',
        'refType' => 'ref_type',
        'secondPartyId' => 'second_party_id',
        'secondPartyType' => 'second_party_type',
        'taxAmount' => 'tax_amount',
        'taxRecieverId' => 'tax_reciever_id',
        'transactionAmount' => 'transaction_amount',
        'transactionDate' => 'transaction_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'argumentName' => 'setArgumentName',
        'argumentValue' => 'setArgumentValue',
        'firstPartyId' => 'setFirstPartyId',
        'firstPartyType' => 'setFirstPartyType',
        'postTransactionBalance' => 'setPostTransactionBalance',
        'reason' => 'setReason',
        'refId' => 'setRefId',
        'refType' => 'setRefType',
        'secondPartyId' => 'setSecondPartyId',
        'secondPartyType' => 'setSecondPartyType',
        'taxAmount' => 'setTaxAmount',
        'taxRecieverId' => 'setTaxRecieverId',
        'transactionAmount' => 'setTransactionAmount',
        'transactionDate' => 'setTransactionDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'argumentName' => 'getArgumentName',
        'argumentValue' => 'getArgumentValue',
        'firstPartyId' => 'getFirstPartyId',
        'firstPartyType' => 'getFirstPartyType',
        'postTransactionBalance' => 'getPostTransactionBalance',
        'reason' => 'getReason',
        'refId' => 'getRefId',
        'refType' => 'getRefType',
        'secondPartyId' => 'getSecondPartyId',
        'secondPartyType' => 'getSecondPartyType',
        'taxAmount' => 'getTaxAmount',
        'taxRecieverId' => 'getTaxRecieverId',
        'transactionAmount' => 'getTransactionAmount',
        'transactionDate' => 'getTransactionDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FIRST_PARTY_TYPE_CHARACTER = 'character';
    const FIRST_PARTY_TYPE_CORPORATION = 'corporation';
    const FIRST_PARTY_TYPE_ALLIANCE = 'alliance';
    const SECOND_PARTY_TYPE_CHARACTER = 'character';
    const SECOND_PARTY_TYPE_CORPORATION = 'corporation';
    const SECOND_PARTY_TYPE_ALLIANCE = 'alliance';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFirstPartyTypeAllowableValues()
    {
        return [
            self::FIRST_PARTY_TYPE_CHARACTER,
            self::FIRST_PARTY_TYPE_CORPORATION,
            self::FIRST_PARTY_TYPE_ALLIANCE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSecondPartyTypeAllowableValues()
    {
        return [
            self::SECOND_PARTY_TYPE_CHARACTER,
            self::SECOND_PARTY_TYPE_CORPORATION,
            self::SECOND_PARTY_TYPE_ALLIANCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['argumentName'] = isset($data['argumentName']) ? $data['argumentName'] : null;
        $this->container['argumentValue'] = isset($data['argumentValue']) ? $data['argumentValue'] : null;
        $this->container['firstPartyId'] = isset($data['firstPartyId']) ? $data['firstPartyId'] : null;
        $this->container['firstPartyType'] = isset($data['firstPartyType']) ? $data['firstPartyType'] : null;
        $this->container['postTransactionBalance'] = isset($data['postTransactionBalance']) ? $data['postTransactionBalance'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['refId'] = isset($data['refId']) ? $data['refId'] : null;
        $this->container['refType'] = isset($data['refType']) ? $data['refType'] : null;
        $this->container['secondPartyId'] = isset($data['secondPartyId']) ? $data['secondPartyId'] : null;
        $this->container['secondPartyType'] = isset($data['secondPartyType']) ? $data['secondPartyType'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxRecieverId'] = isset($data['taxRecieverId']) ? $data['taxRecieverId'] : null;
        $this->container['transactionAmount'] = isset($data['transactionAmount']) ? $data['transactionAmount'] : null;
        $this->container['transactionDate'] = isset($data['transactionDate']) ? $data['transactionDate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['firstPartyType'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'firstPartyType', must be one of #{allowed_values}.";
        }

        if ($this->container['refId'] === null) {
            $invalid_properties[] = "'refId' can't be null";
        }
        if ($this->container['refType'] === null) {
            $invalid_properties[] = "'refType' can't be null";
        }
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['secondPartyType'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'secondPartyType', must be one of #{allowed_values}.";
        }

        if ($this->container['transactionDate'] === null) {
            $invalid_properties[] = "'transactionDate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['firstPartyType'], $allowed_values)) {
            return false;
        }
        if ($this->container['refId'] === null) {
            return false;
        }
        if ($this->container['refType'] === null) {
            return false;
        }
        $allowed_values = ["character", "corporation", "alliance"];
        if (!in_array($this->container['secondPartyType'], $allowed_values)) {
            return false;
        }
        if ($this->container['transactionDate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets argumentName
     * @return string
     */
    public function getArgumentName()
    {
        return $this->container['argumentName'];
    }

    /**
     * Sets argumentName
     * @param string $argumentName argument_name string
     * @return $this
     */
    public function setArgumentName($argumentName)
    {
        $this->container['argumentName'] = $argumentName;

        return $this;
    }

    /**
     * Gets argumentValue
     * @return int
     */
    public function getArgumentValue()
    {
        return $this->container['argumentValue'];
    }

    /**
     * Sets argumentValue
     * @param int $argumentValue argument_value integer
     * @return $this
     */
    public function setArgumentValue($argumentValue)
    {
        $this->container['argumentValue'] = $argumentValue;

        return $this;
    }

    /**
     * Gets firstPartyId
     * @return int
     */
    public function getFirstPartyId()
    {
        return $this->container['firstPartyId'];
    }

    /**
     * Sets firstPartyId
     * @param int $firstPartyId first_party_id integer
     * @return $this
     */
    public function setFirstPartyId($firstPartyId)
    {
        $this->container['firstPartyId'] = $firstPartyId;

        return $this;
    }

    /**
     * Gets firstPartyType
     * @return string
     */
    public function getFirstPartyType()
    {
        return $this->container['firstPartyType'];
    }

    /**
     * Sets firstPartyType
     * @param string $firstPartyType first_party_type string
     * @return $this
     */
    public function setFirstPartyType($firstPartyType)
    {
        $allowed_values = array('character', 'corporation', 'alliance');
        if (!is_null($firstPartyType) && (!in_array($firstPartyType, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'firstPartyType', must be one of 'character', 'corporation', 'alliance'");
        }
        $this->container['firstPartyType'] = $firstPartyType;

        return $this;
    }

    /**
     * Gets postTransactionBalance
     * @return int
     */
    public function getPostTransactionBalance()
    {
        return $this->container['postTransactionBalance'];
    }

    /**
     * Sets postTransactionBalance
     * @param int $postTransactionBalance post_transaction_balance integer
     * @return $this
     */
    public function setPostTransactionBalance($postTransactionBalance)
    {
        $this->container['postTransactionBalance'] = $postTransactionBalance;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason reason string
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets refId
     * @return int
     */
    public function getRefId()
    {
        return $this->container['refId'];
    }

    /**
     * Sets refId
     * @param int $refId ref_id integer
     * @return $this
     */
    public function setRefId($refId)
    {
        $this->container['refId'] = $refId;

        return $this;
    }

    /**
     * Gets refType
     * @return string
     */
    public function getRefType()
    {
        return $this->container['refType'];
    }

    /**
     * Sets refType
     * @param string $refType ref_type string
     * @return $this
     */
    public function setRefType($refType)
    {
        $this->container['refType'] = $refType;

        return $this;
    }

    /**
     * Gets secondPartyId
     * @return int
     */
    public function getSecondPartyId()
    {
        return $this->container['secondPartyId'];
    }

    /**
     * Sets secondPartyId
     * @param int $secondPartyId second_party_id integer
     * @return $this
     */
    public function setSecondPartyId($secondPartyId)
    {
        $this->container['secondPartyId'] = $secondPartyId;

        return $this;
    }

    /**
     * Gets secondPartyType
     * @return string
     */
    public function getSecondPartyType()
    {
        return $this->container['secondPartyType'];
    }

    /**
     * Sets secondPartyType
     * @param string $secondPartyType second_party_type string
     * @return $this
     */
    public function setSecondPartyType($secondPartyType)
    {
        $allowed_values = array('character', 'corporation', 'alliance');
        if (!is_null($secondPartyType) && (!in_array($secondPartyType, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'secondPartyType', must be one of 'character', 'corporation', 'alliance'");
        }
        $this->container['secondPartyType'] = $secondPartyType;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return int
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param int $taxAmount tax_amount integer
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxRecieverId
     * @return int
     */
    public function getTaxRecieverId()
    {
        return $this->container['taxRecieverId'];
    }

    /**
     * Sets taxRecieverId
     * @param int $taxRecieverId tax_reciever_id integer
     * @return $this
     */
    public function setTaxRecieverId($taxRecieverId)
    {
        $this->container['taxRecieverId'] = $taxRecieverId;

        return $this;
    }

    /**
     * Gets transactionAmount
     * @return int
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     * @param int $transactionAmount Positive if transferred to first party, negative if transferred to second party
     * @return $this
     */
    public function setTransactionAmount($transactionAmount)
    {
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }

    /**
     * Gets transactionDate
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     * @param \DateTime $transactionDate transaction_date string
     * @return $this
     */
    public function setTransactionDate($transactionDate)
    {
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}
